import logging
import re
import io
from telegram import Update, InputFile
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from weather_service import WeatherService
from translation_service import TranslationService
from fun_service import FunService
from cat import get_random_cat

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class MultiToolBot:
    def __init__(self):
        self.weather_service = WeatherService("8013b162-6b42-4997-9691-77b7074026e0")
        self.translation_service = TranslationService()
        self.fun_service = FunService()
        self.user_modes = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        welcome_text = """
üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MultiToolBot!* üåü

–Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç —Å –Ω–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏:

üå§ –ü–æ–≥–æ–¥–∞: /map [–≥–æ—Ä–æ–¥]
üåç –ü–µ—Ä–µ–≤–æ–¥: /pereen [—Ç–µ–∫—Å—Ç], /pereru [—Ç–µ–∫—Å—Ç]
üòÑ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è: /fact, /cat
üßÆ *–ù–æ–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä*: /calc –∏–ª–∏ "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"

–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –≤–≤–µ–¥–∏—Ç–µ /help
"""
        await update.message.reply_text(welcome_text, parse_mode="Markdown")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        help_text = """
ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã*:

üßÆ *–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä*:
/calc - –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
(–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ)

üå§ *–ü–æ–≥–æ–¥–∞*:
/map [–º–µ—Å—Ç–æ] - –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É

üåç *–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫*:
/pereen [—Ç–µ–∫—Å—Ç] - –ù–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
/pereru [—Ç–µ–∫—Å—Ç] - –ù–∞ —Ä—É—Å—Å–∫–∏–π

üòÑ *–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è*:
/fact - –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç
/cat - –§–æ—Ç–æ –∫–æ—Ç–∏–∫–∞

üÜò *–ü–æ–º–æ—â—å*:
/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
"""
        await update.message.reply_text(help_text, parse_mode="Markdown")

    # –í–∞—à–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (map, pereen, pereru, fact, cat)
    # ... (–æ—Å—Ç–∞–≤—å—Ç–µ –∏—Ö –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫–∞–∫ –≤ –≤–∞—à–µ–º –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ)
    
    # –ù–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    async def calc_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
        self.user_modes[update.effective_user.id] = 'calculator'
        await update.message.reply_text(
            "üßÆ –†–µ–∂–∏–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2+2*3)\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /exit –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞",
            reply_markup=self._get_calc_keyboard()
        )

    async def handle_calculation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–ª –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
        if (user_id not in self.user_modes or 
            self.user_modes[user_id] != 'calculator') and not self._is_math_expression(update.message.text):
            return
        
        text = update.message.text.strip().lower()
        
        if text in ('exit', '/exit', '–≤—ã—Ö–æ–¥'):
            self.user_modes.pop(user_id, None)
            await update.message.reply_text("–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞", reply_markup=None)
            return
        
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
            if not self._is_safe_expression(text):
                await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã (+-*/).")
                return
                
            result = eval(text)  # –í–∞–∂–Ω–æ: –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä!
            await update.message.reply_text(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        except ZeroDivisionError:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å!")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    def _get_calc_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
        buttons = [
            "7", "8", "9", "/",
            "4", "5", "6", "*",
            "1", "2", "3", "-",
            "0", ".", "=", "+",
            "C", "(", ")", "exit"
        ]
        keyboard = []
        for i in range(0, len(buttons), 4):
            keyboard.append(buttons[i:i+4])
        return {'keyboard': keyboard, 'resize_keyboard': True}

    def _is_math_expression(self, text):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º"""
        return bool(re.match(r'^[\d+\-*/().\s=]+$', text.strip()))

    def _is_safe_expression(self, text):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è"""
        return bool(re.fullmatch(r'^[\d+\-*/().\s=]+$', text.strip()))

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å–æ –≤—Å–µ–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏"""
        application = Application.builder().token("8169674662:AAGKP5lBoeYudEHYW_nWKHW6jlue3xW4xT0").build()

        # –í–∞—à–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("map", self.map_command))
        application.add_handler(CommandHandler("pereen", self.pereen_command))
        application.add_handler(CommandHandler("pereru", self.pereru_command))
        application.add_handler(CommandHandler("fact", self.fact_command))
        application.add_handler(CommandHandler("cat", self.cat_command))
        
        # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        application.add_handler(CommandHandler("calc", self.calc_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_calculation))

        application.run_polling()

if __name__ == "__main__":
    bot = MultiToolBot()
    bot.run()