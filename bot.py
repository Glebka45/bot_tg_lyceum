from telegram import Update, InputFile
import pytz
from telegram.ext import Defaults
from telegram.ext import Application, CommandHandler, ContextTypes
from weather_service import WeatherService
from translation_service import TranslationService
from fun_service import FunService
from calculator_service import CalculatorService
from movie_service import MovieService
from cat import get_random_cat
import io
import logging
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–ª—é—á–∏ API
YANDEX_GEOCODER_API_KEY = "8013b162-6b42-4997-9691-77b7074026e0"
TELEGRAM_BOT_TOKEN = "7920203153:AAHyEVeHPWU-vwoYviguKUk7IWJdsNdQSik"
TMDB_API_KEY = 'dd60521'
OMDB_API_KEY = "dd60521"


class WeatherBot:
    def __init__(self):
        self.weather_service = WeatherService(YANDEX_GEOCODER_API_KEY)
        self.translation_service = TranslationService()
        self.fun_service = FunService()
        self.calculator = CalculatorService()
        self.movie_service = MovieService(TMDB_API_KEY)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        welcome_text = """
üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WeatherBot!* üåü

–Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç:
üå§ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ
üåç –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç –º–µ–∂–¥—É —Ä—É—Å—Å–∫–∏–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º
üé¨ –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–∞—Ö
üßÆ –í—ã–ø–æ–ª–Ω—è—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã
üòÑ –†–∞–∑–≤–ª–µ–∫–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏
üêà –ü—Ä–∏—Å—ã–ª–∞—Ç—å –º–∏–ª—ã—Ö –∫–æ—Ç–∏–∫–æ–≤

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/map [–≥–æ—Ä–æ–¥] - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É
/pereen [—Ç–µ–∫—Å—Ç] - –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
/pereru [—Ç–µ–∫—Å—Ç] - –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
/movie [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ
/calc [–≤—ã—Ä–∞–∂–µ–Ω–∏–µ] - –≤—ã—á–∏—Å–ª–∏—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
/fact - —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç
/cat - —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–∞

üìå –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –≤–≤–µ–¥–∏—Ç–µ /help
"""
        await update.message.reply_text(welcome_text, parse_mode="Markdown")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥"""
        help_text = """
ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞*:

üßÆ *–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä*:
/calc [–≤—ã—Ä–∞–∂–µ–Ω–∏–µ] - –í—ã—á–∏—Å–ª–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ

üé¨ *–§–∏–ª—å–º—ã*:
/movie [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –ù–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /movie The Matrix)

üå§ *–ü–æ–≥–æ–¥–∞*:
/map [–º–µ—Å—Ç–æ] - –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –º–µ—Å—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /map –ú–æ—Å–∫–≤–∞)

üåç *–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫*:
/pereen [—Ç–µ–∫—Å—Ç] - –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
/pereru [—Ç–µ–∫—Å—Ç] - –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π

üòÑ *–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è*:
/fact - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç
/cat - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–∞

üÜò *–ü–æ–º–æ—â—å*:
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
"""
        await update.message.reply_text(help_text, parse_mode="Markdown")

    async def map_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /map —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º"""
        if not context.args:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /map –ú–æ—Å–∫–≤–∞")
            return

        location = ' '.join(context.args)
        await self.process_location(update, location)

    async def pereen_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pereen –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"""
        if not context.args:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /pereen –ø—Ä–∏–≤–µ—Ç")
            return

        text = ' '.join(context.args)
        translated = self.translation_service.translate_text(text, target_lang='en')
        await update.message.reply_text(f"–ü–µ—Ä–µ–≤–æ–¥: {translated}")

    async def pereru_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pereru –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π"""
        if not context.args:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /pereru hello")
            return

        text = ' '.join(context.args)
        translated = self.translation_service.translate_text(text, target_lang='ru')
        await update.message.reply_text(f"–ü–µ—Ä–µ–≤–æ–¥: {translated}")

    async def fact_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /fact –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞"""
        fact = self.fun_service.get_random_fact()
        await update.message.reply_text(f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç: {fact}")

    async def cat_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cat –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ—Ç–∏–∫–∞"""
        try:
            cat_image = get_random_cat()
            photo_stream = io.BytesIO(cat_image)
            photo_stream.name = 'cat.jpg'
            await update.message.reply_photo(photo=InputFile(photo_stream))
        except Exception as e:
            logger.error(f"Error sending cat: {e}")
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ—Ç–∏–∫–∞ üòø –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

    async def process_location(self, update: Update, location: str):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞—Ü–∏–∏"""
        try:
            latitude, longitude = await self.weather_service.get_coordinates(location)
            if not latitude or not longitude:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–∞.")
                return

            weather_data = await self.weather_service.get_weather(latitude, longitude)
            message = self.weather_service.format_weather_message(weather_data)
            await update.message.reply_text(message)

        except Exception as e:
            logger.error(f"Error processing location: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å.")

    async def calc_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /calc"""
        if not context.args:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: /calc 2+2*3")
            return

        expression = ' '.join(context.args)
        result = self.calculator.calculate(expression)
        await update.message.reply_text(result)

    async def movie_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /movie - –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ (–∫–∞–∫ –≤ –ø–µ—Ä–≤–æ–º –±–æ—Ç–µ)"""
        if not context.args:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: /movie –ú–∞—Ç—Ä–∏—Ü–∞")
            return

        movie_title = ' '.join(context.args)
        url = f"http://www.omdbapi.com/?apikey={OMDB_API_KEY}&t={movie_title}"

        try:
            response = requests.get(url)
            data = response.json()

            if data.get("Response") == "True":
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ
                info = (
                    f"üé• *{data.get('Title', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}* ({data.get('Year', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')})\n"
                    f"‚≠ê *IMDb:* {data.get('imdbRating', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
                    f"üé≠ *–ñ–∞–Ω—Ä:* {data.get('Genre', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
                    f"üìÖ *–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞:* {data.get('Released', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
                    f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {data.get('Plot', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç–µ—Ä
                if data.get("Poster") and data["Poster"] != "N/A":
                    await update.message.reply_photo(
                        photo=data["Poster"],
                        caption=info,
                        parse_mode="Markdown"
                    )
                else:
                    await update.message.reply_text(info, parse_mode="Markdown")
            else:
                await update.message.reply_text("–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")

        except Exception as e:
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∏–ª—å–º–∞: {e}")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –£–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —è–≤–Ω–æ
        defaults = Defaults(tzinfo=pytz.timezone('Europe/Moscow'))

        application = (
            Application.builder()
            .token(TELEGRAM_BOT_TOKEN)
            .defaults(defaults)
            .build()
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("map", self.map_command))
        application.add_handler(CommandHandler("pereen", self.pereen_command))
        application.add_handler(CommandHandler("pereru", self.pereru_command))
        application.add_handler(CommandHandler("fact", self.fact_command))
        application.add_handler(CommandHandler("cat", self.cat_command))
        application.add_handler(CommandHandler("calc", self.calc_command))
        application.add_handler(CommandHandler("movie", self.movie_command))

        application.run_polling()


if __name__ == "__main__":
    bot = WeatherBot()
    bot.run()